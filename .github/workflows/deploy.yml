name: Deploy to AWS

on:
  workflow_dispatch:  # Manual trigger only
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'bootstrap*.sh'

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

    - name: Login to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        ECR_REPOSITORY: my-bedrock-proxy
        IMAGE_TAG: ${{ github.sha }}
      run: |
        set -e
        echo "Ensuring ECR repository exists: $ECR_REPOSITORY"
        aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$ECR_REPOSITORY" --image-scanning-configuration scanOnPush=true

        echo "Building image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        echo "TF_VAR_container_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.7
        
    - name: Terraform Init
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_APP_KEY }}
        TF_VAR_datadog_site: ${{ secrets.DATADOG_SITE || 'datadoghq.com' }}
        TF_VAR_container_image: ${{ env.TF_VAR_container_image }}
      run: |
        cd infra
        terraform init
        
    - name: Terraform Plan
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_APP_KEY }}
        TF_VAR_datadog_site: ${{ secrets.DATADOG_SITE || 'datadoghq.com' }}
        TF_VAR_container_image: ${{ env.TF_VAR_container_image }}
      run: |
        cd infra
        terraform plan -out=tfplan
        
    - name: Terraform Apply
      env:
        TF_VAR_datadog_api_key: ${{ secrets.DATADOG_API_KEY }}
        TF_VAR_datadog_app_key: ${{ secrets.DATADOG_APP_KEY }}
        TF_VAR_datadog_site: ${{ secrets.DATADOG_SITE || 'datadoghq.com' }}
        TF_VAR_container_image: ${{ env.TF_VAR_container_image }}
      run: |
        cd infra
        terraform apply -auto-approve tfplan
        
    - name: Get App Runner URL
      id: app-runner
      run: |
        cd infra
        APP_URL=$(terraform output -raw app_runner_url)
        echo "APP_URL=$APP_URL" >> $GITHUB_OUTPUT
        echo "App Runner URL: $APP_URL"
        
    - name: Wait for deployment
      run: |
        echo "Waiting 60 seconds for App Runner service to be ready..."
        sleep 60
        
    - name: Set up Python for smoke tests
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install test dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest requests
        
    - name: Run smoke tests
      env:
        APP_URL: ${{ steps.app-runner.outputs.APP_URL }}
      run: |
        pytest tests/test_smoke.py -v --tb=short
        
    - name: Output deployment info
      run: |
        cd infra
        echo "## ðŸš€ Deployment Successful" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**App Runner URL:** $(terraform output -raw app_runner_url)" >> $GITHUB_STEP_SUMMARY
        echo "**Datadog Dashboard:** $(terraform output -raw dashboard_url)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Monitors Created:" >> $GITHUB_STEP_SUMMARY
        echo "- High Latency Monitor ID: $(terraform output -raw high_latency_monitor_id)" >> $GITHUB_STEP_SUMMARY
        echo "- High Error Rate Monitor ID: $(terraform output -raw high_error_rate_monitor_id)" >> $GITHUB_STEP_SUMMARY
